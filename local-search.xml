<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2023/04/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-1/"/>
    <url>/2023/04/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-1/</url>
    
    <content type="html"><![CDATA[<h4 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h4><p>Ensure a class has only one instance, and provide a global point of access to it. </p><p>(确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。)</p><h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</li><li>由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永驻留内存的方式来解决 </li><li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</li><li>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</li></ul><h4 id="3-饿汉模式："><a href="#3-饿汉模式：" class="headerlink" title="3.饿汉模式："></a>3.饿汉模式：</h4><p>在类加载的时候进行初始化，这样就得到了唯一的一个可用对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//饿汉模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HungerPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HungerPattern</span>(<span class="hljs-type">const</span>HungerPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>HungerPattern&amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> HungerPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> HungerPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_HungerPattern;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">HungerPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> HungerPattern* m_HungerPattern;<br>&#125;;<br><br><span class="hljs-comment">//静态成员初始化放到类外部处理</span><br>HungerPattern* HungerPattern::m_HungerPattern = <span class="hljs-keyword">new</span> HungerPattern;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Hunger_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HungerPattern* obj = HungerPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-懒汉模式"><a href="#4-懒汉模式" class="headerlink" title="4.懒汉模式:"></a>4.懒汉模式:</h4><h5 id="4-1-类的定义"><a href="#4-1-类的定义" class="headerlink" title="4.1 类的定义"></a>4.1 类的定义</h5><p>在类加载的时候不去创建实例，而是在需要的时候进行实例化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//懒汉模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LazyPattern != <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_LazyPattern = <span class="hljs-keyword">new</span> LazyPattern;<br>&#125;<br><span class="hljs-keyword">return</span> m_LazyPattern;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> LazyPattern* m_LazyPattern;<br>&#125;;<br><br>LazyPattern* LazyPattern::m_LazyPattern = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-线程安全问题"><a href="#4-2-线程安全问题" class="headerlink" title="4.2 线程安全问题"></a>4.2 线程安全问题</h5><p>对于饿汉模式是没有线程安全问题的，在这种模式下访问单例对象的时候，这个对象已经被创建出来了。</p><p>要解决懒汉模式的线程安全问题，最常用的解决方案就是使用互斥锁。</p><h6 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> DoubleCheck &#123;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LazyPattern == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_Mutex.<span class="hljs-built_in">lock</span>();<br><span class="hljs-keyword">if</span> (m_LazyPattern == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_LazyPattern = <span class="hljs-keyword">new</span> LazyPattern;<br>&#125;<br>m_Mutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br><span class="hljs-keyword">return</span> m_LazyPattern;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> LazyPattern* m_LazyPattern;<br><span class="hljs-type">static</span> mutex m_Mutex;<br>&#125;;<br><br>LazyPattern* LazyPattern::m_LazyPattern = <span class="hljs-literal">nullptr</span>;<br>mutex LazyPattern::m_Mutex;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h6><ul><li>静态局部变量存储在全局数据区；</li><li>生命周期为整个程序结束；</li><li>静态局部变量的初始化与全局变量类似；</li><li>如果不为显示初始化，那么C++将自动初始化为0；</li><li>当变量未被初始化时，所有并发执行都应当等待该变量初始化完成。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> StaticLocalVariable &#123;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> LazyPattern m_LazyPattern;<br><span class="hljs-keyword">return</span> &amp;m_LazyPattern;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>obj-&gt;<span class="hljs-built_in">Print</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">懒汉模式的缺点是在创建实例对象的时候有安全问题，但这样可以减少内存的浪费（如果用不到就不去申请内存了）。<br>饿汉模式则相反，在我们不需要这个实例对象的时候，它已经被创建出来，占用了一块内存。<br>对于现在的计算机而言，内存容量都是足够大的，这个缺陷可以被无视。<br></code></pre></td></tr></table></figure><h4 id="5-UML图"><a href="#5-UML图" class="headerlink" title="5.UML图"></a>5.UML图</h4><p><img src="C:\Users\saoqi\Downloads\单例模式.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/04/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h4><p>Ensure a class has only one instance, and provide a global point of access to it. </p><p>(确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。)</p><h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</li><li>由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永驻留内存的方式来解决 </li><li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</li><li>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</li></ul><h4 id="3-饿汉模式："><a href="#3-饿汉模式：" class="headerlink" title="3.饿汉模式："></a>3.饿汉模式：</h4><p>在类加载的时候进行初始化，这样就得到了唯一的一个可用对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//饿汉模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HungerPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HungerPattern</span>(<span class="hljs-type">const</span>HungerPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>HungerPattern&amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> HungerPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> HungerPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_HungerPattern;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">HungerPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> HungerPattern* m_HungerPattern;<br>&#125;;<br><br><span class="hljs-comment">//静态成员初始化放到类外部处理</span><br>HungerPattern* HungerPattern::m_HungerPattern = <span class="hljs-keyword">new</span> HungerPattern;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Hunger_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HungerPattern* obj = HungerPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-懒汉模式"><a href="#4-懒汉模式" class="headerlink" title="4.懒汉模式:"></a>4.懒汉模式:</h4><h5 id="4-1-类的定义"><a href="#4-1-类的定义" class="headerlink" title="4.1 类的定义"></a>4.1 类的定义</h5><p>在类加载的时候不去创建实例，而是在需要的时候进行实例化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//懒汉模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LazyPattern != <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_LazyPattern = <span class="hljs-keyword">new</span> LazyPattern;<br>&#125;<br><span class="hljs-keyword">return</span> m_LazyPattern;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> LazyPattern* m_LazyPattern;<br>&#125;;<br><br>LazyPattern* LazyPattern::m_LazyPattern = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-线程安全问题"><a href="#4-2-线程安全问题" class="headerlink" title="4.2 线程安全问题"></a>4.2 线程安全问题</h5><p>对于饿汉模式是没有线程安全问题的，在这种模式下访问单例对象的时候，这个对象已经被创建出来了。</p><p>要解决懒汉模式的线程安全问题，最常用的解决方案就是使用互斥锁。</p><h6 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> DoubleCheck &#123;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_LazyPattern == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_Mutex.<span class="hljs-built_in">lock</span>();<br><span class="hljs-keyword">if</span> (m_LazyPattern == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>m_LazyPattern = <span class="hljs-keyword">new</span> LazyPattern;<br>&#125;<br>m_Mutex.<span class="hljs-built_in">unlock</span>();<br>&#125;<br><span class="hljs-keyword">return</span> m_LazyPattern;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-type">static</span> LazyPattern* m_LazyPattern;<br><span class="hljs-type">static</span> mutex m_Mutex;<br>&#125;;<br><br>LazyPattern* LazyPattern::m_LazyPattern = <span class="hljs-literal">nullptr</span>;<br>mutex LazyPattern::m_Mutex;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h6><ul><li>静态局部变量存储在全局数据区；</li><li>生命周期为整个程序结束；</li><li>静态局部变量的初始化与全局变量类似；</li><li>如果不为显示初始化，那么C++将自动初始化为0；</li><li>当变量未被初始化时，所有并发执行都应当等待该变量初始化完成。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> StaticLocalVariable &#123;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPattern</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LazyPattern</span>(<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br>LazyPattern&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> LazyPattern&amp; obj) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> LazyPattern* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> LazyPattern m_LazyPattern;<br><span class="hljs-keyword">return</span> &amp;m_LazyPattern;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">LazyPattern</span>() = <span class="hljs-keyword">default</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lazy_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LazyPattern* obj = LazyPattern::<span class="hljs-built_in">GetInstance</span>();<br>obj-&gt;<span class="hljs-built_in">Print</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">懒汉模式的缺点是在创建实例对象的时候有安全问题，但这样可以减少内存的浪费（如果用不到就不去申请内存了）。<br>饿汉模式则相反，在我们不需要这个实例对象的时候，它已经被创建出来，占用了一块内存。<br>对于现在的计算机而言，内存容量都是足够大的，这个缺陷可以被无视。<br></code></pre></td></tr></table></figure><h4 id="5-UML图"><a href="#5-UML图" class="headerlink" title="5.UML图"></a>5.UML图</h4><p><img src="C:\Users\saoqi\Downloads\单例模式.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2023/04/15/Test-1/"/>
    <url>/2023/04/15/Test-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/15/hello-world/"/>
    <url>/2023/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
